// @flow
// Script to start the dev build

import chalk from 'chalk'
import webpack from 'webpack'
import WebpackDevServer from 'webpack-dev-server'
import nodemon from 'nodemon'
import {
  choosePort,
} from 'react-dev-utils/WebpackDevServerUtils'
import openBrowser from 'react-dev-utils/openBrowser'

import paths from '../../config/paths'
import prepareUrls from './config/prepareUrls'
import webpackConfig from '../../config/webpack.config.babel'
import createDevServerConfig from '../../config/webpackDevServer.config'
import createCompiler from './config/webpackCompiler.config'
import { WEB_PORT, WDS_PORT } from '../../config/config'


// Set development environment
process.env.BABEL_ENV = 'development'
process.env.NODE_ENV = 'development'


// Tools like Cloud9 rely on this.
const HOST = process.env.HOST || '0.0.0.0'

choosePort(HOST, WDS_PORT)
  .then((port: any) => {
    if (port == null) {
      // We have not found a port.
      return
    }

    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http'
    //eslint-disable-next-line
    const appName = require(paths.appPackageJson).name
    const urls = prepareUrls(protocol, HOST, port, WEB_PORT)
    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler(webpack, webpackConfig, appName, urls)
    // Serve webpack assets generated by the compiler over a web sever.
    const serverConfig = createDevServerConfig()
    const devServer = new WebpackDevServer(compiler, serverConfig)
    // Start nodemon
    nodemon('-e js,jsx --ignore lib --ignore dist --exec babel-node src/server')
    nodemon.on('start', () => {

    }).on('quit', () => {
      process.exit()
    })
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, (err) => {
      if (err) {
        return console.log(err) // eslint-disable-line no-console
      }
      console.log(chalk.cyan('Starting the development server...\n')) // eslint-disable-line no-console
      openBrowser(urls.localUrlForBrowserExp)
      return console.log('Devpack started.') // eslint-disable-line no-console
    });

    ['SIGINT', 'SIGTERM'].forEach((sig) => {
      process.on(sig, () => {
        devServer.close()
        process.exit()
      })
    })
  })
  .catch((err) => {
    if (err && err.message) {
      console.log(err) // eslint-disable-line no-console
      console.log(err.message) // eslint-disable-line no-console
    }
    process.exit(1)
  })
